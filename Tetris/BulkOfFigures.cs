using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tetris
{
    class BulkOfFigures
    {
        public static List<Point> Bulk = new List<Point>(); //Список упавших точек
        int[] Nums = new int[23];   //Массив  индекс которого соответствует строкам. А сождержимое - кол-во точек в этом уровне
        int[] StepDownRaws = new int[23];  //Массив количества шагов вниз для незаполненных строк после удаления заполненных


        public bool CheckHorizontalLevel() //проверяем наличие заполненных уровней
        {
            bool FullRaw = false;   //Изначально - незаполненных уровней нет
            int k;
            int StepRaw;  //Количество шагов вниз для незаполненных уровней после сгоряния под ними заполненных уровней

            for (int i = 0; i <= 22; i++) //Обнуляем массив, хранящий номер координаты Y(индекс массива) и количество точек с такм Y
            {
                Nums[i] = 0;
            }

            for (int i = 0; i <= 22; i++) //Обнуляем массив, который содержит кол-во шагов для опускания несгоревших строк.
            {
                StepDownRaws[i] = 0;
            }

            for (int j = 0; j < Bulk.Count; j++) // -1 т.к. надо понимать, что лежат точки в жиапазоне индексов от 0 до 23, а COUNT опказывает число 24. Поэтому мы идем до 23. До 23го ИНДЕКСА!!!
            {
                k = Bulk[j].y;  //k - значение Y точки
                Nums[k] = Nums[k] + 1;  //Суммируем количество точек с координатой Y. Если k изменился - переходим к следующему элементу и заполняем его.
                if (Nums[Bulk[j].y] == 20) //Если с координатой Y у нас 20 точек - значит уровень заполнен
                {
                    FullRaw = true;  //Если хоть где-то кол-во точек на одном Y превысело ряд, то FullRaw = true
                }
            }

            StepRaw = 0;
            for (int i = 22; i >= 0; i--)  //Заполняем массив с информацией о том, на сколько точек опуститься каждой строке после удаления строк
            {
                if (Nums[i] == 20) //Если одна строчка полностью заполнена, то следующая (y-1) должна спуститься на 1 шаг вниз. Если заполнено две строки, то опускаться будем на две строки
                {
                    StepRaw = StepRaw + 1;
                }
                if (Nums[i] != 0 & Nums[i] != 20)  //Записываем шаг опускания вниз туда, где есть какие-то элементы
                {
                    StepDownRaws[i] = StepRaw;
                }
            }
            return FullRaw;
        }

        public void DeleteLayers() //Удаляем заполненные уровни
        {

            for (int i = 22; i >= 0; i--)
            {
                if (Nums[i] == 20)  //i соответствует уровню Y, который надо уничтожить
                {
                    for (int j = 0; j <= (Bulk.Count) - 1; j++) //Проходим по всем упавшим точкам
                    {
                        if (Bulk[j].y == i) //Если у точки Y совпал с индексом массива
                        {
                            Bulk[j].BulkClear();      //На место точки, которую надо удалить выводим пустой символ
                        }
                    }
                }
            }

            for (int j = Bulk.Count-1; j >= 0; j--) //Проходимся по всем точкам с конца
            {
                if (Bulk[j].sym == ' ') //Если точка - пустой символ. Это точки для удаления.
                {
                    Bulk.RemoveAt(j);   //Удаляем эти точки из списка упавших точек
                }
            }

            for (int i = 22; i >= 0; i--)   //Сдвигаем вниз неудаляенные уровни
            {
                if (StepDownRaws[i] != 0)   //StepDownRaws - массив количество шагов вниз для уровней
                {
                    for (int j = 0; j <= (Bulk.Count) - 1; j++) //Проходим по всем упавшим точкам с координатой Y, равной текушему i.
                    {
                        if (Bulk[j].y == i) //Если у точки y совпал с индексом массива
                        {
                            Bulk[j].BulkClear();    //На месте точки пустой символ
                            Bulk[j].Move(1, Direction.DOWN); //Движение координат точки вниз
                            Bulk[j].Draw();  //Вывод символа точки в сдвинутых вниз координатах
                        }
                    }
                }
            }
        }
    }
}
